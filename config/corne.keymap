/*
 * Copyright (c) 2020 Jonathan Rascher
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define TAPPING_TERM 200
#define LOWER 1
#define RAISE 2
#define ADJUST 3
#define BACK C_AC_BACK
#define FWD C_AC_FORWARD
#define PAUSE PAUSE_BREAK
#define VOL_DN C_VOL_DN
#define VOL_UP C_VOL_UP
#define ZM_IN LC(EQUAL)
#define ZM_OUT LC(MINUS)
#define ZM_RST LC(N0)
#define BT0 BT_SEL 0
#define BT1 BT_SEL 1
#define BT2 BT_SEL 2
#define BT3 BT_SEL 3
#define BT4 BT_SEL 4
#define HYP LS(LC(LA(LGUI)))

/*
 *  Bindings taken from
 *   https://github.com/bcat/zmk-config/blob/master/config/corne.keymap
 *   https://github.com/rastasheep/zmk-config/blob/master/config/corne.keymap
*/
/* TODO: need to map FN keys */

&kscan0 { debounce-period = <10>; };

&mt {
    tapping-term-ms = <TAPPING_TERM>;
    flavor = "tap-preferred";
};

/ {
    behaviors {
        /*
        * td_lock groups locking functions into one key:
        *  - tap once to lock the host
        *  - tap twice to put the host to sleep
        */

        td_lock: tap_dance_lock {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_LOCK";
            #binding-cells = <0>;
            tapping-term-ms = <TAPPING_TERM>;
            bindings = <&kp LG(LC(Q))>, <&kp LG(LA(C_EJECT))>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <LOWER RAISE>;
            then-layer = <ADJUST>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
&kp TAB                  &kp Q  &kp W  &kp E     &kp R      &kp T        &kp Y      &kp U  &kp I          &kp O    &kp P     &kp BACKSPACE
&mt LEFT_CONTROL ESCAPE  &kp A  &kp S  &kp D     &kp F      &kp G        &kp H      &kp J  &kp K          &kp L    &kp SEMI  &kp SQT
&kp LSHFT                &kp Z  &kp X  &kp C     &kp V      &kp B        &kp N      &kp M  &kp COMMA      &kp DOT  &kp FSLH  &kp RIGHT_SHIFT
                                       &kp LGUI  &mo LOWER  &kp SPACE    &kp ENTER  &mo 2  &kp RIGHT_ALT
            >;
        };

        lower {
            bindings = <
&kp ESCAPE      &none  &kp N7        &kp N8        &kp N9        &kp PAGE_UP      &kp LA(LEFT_ARROW)      &kp LA(RIGHT)     &kp LC(LS(TAB))  &kp LC(TAB)  &none      &kp DELETE
&kp RCTRL       &none  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp PAGE_DOWN    &kp LEFT                &kp DOWN          &kp UP_ARROW     &kp RIGHT    &kp COLON  &kp ENTER
&kp LEFT_SHIFT  &none  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp N0           &kp LA(DOWN_ARROW)      &kp LA(UP_ARROW)  &none            &none        &none      &none
                                     &kp LEFT_GUI  &trans        &kp SPACE        &mt LEFT_GUI LG(SPACE)  &mo 2             &kp RIGHT_ALT
            >;
        };

        raise {
            bindings = <
&kp GRAVE       &kp EXCLAMATION  &kp AT_SIGN     &kp HASH              &kp DOLLAR        &kp PERCENT    &kp CARET          &kp AMPERSAND      &kp ASTERISK           &kp PLUS         &kp EQUAL      &kp MINUS
&kp LCTRL       &none            &kp LEFT_BRACE  &kp LEFT_PARENTHESIS  &kp LEFT_BRACKET  &kp SQT        &kp DOUBLE_QUOTES  &kp RIGHT_BRACKET  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE  &kp BACKSLASH  &kp ENTER
&kp LEFT_SHIFT  &none            &none           &none                 &none             &none          &kp UNDERSCORE     &none              &none                  &none            &none          &kp RIGHT_SHIFT
                                                 &kp LEFT_GUI          &trans            &kp SPACE      &kp SPACE          &trans             &kp RIGHT_ALT
            >;
        };

        adjust {
            bindings = <
&none  &kp LS(LG(NUMBER_4))  &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP      &none         &bt BT_CLR  &none    &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &none    &none
&none  &kp LS(LG(N5))        &none       &kp C_PREV    &kp C_PLAY_PAUSE  &kp C_NEXT    &bt BT0     &bt BT1  &bt BT2               &bt BT3               &bt BT4  &none
&none  &kp LS(LG(NUMBER_3))  &none       &none         &none             &none         &none       &none    &none                 &none                 &none    &none
                                         &none         &trans            &none         &none       &trans   &none
            >;
        };
    };
};
