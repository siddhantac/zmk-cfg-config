/*
 * Copyright (c) 2020 Jonathan Rascher
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define TAPPING_TERM 200
#define LOWER 1
#define RAISE 2
#define ADJUST 3
#define BACK C_AC_BACK
#define FWD C_AC_FORWARD
#define PAUSE PAUSE_BREAK
#define VOL_DN C_VOL_DN
#define VOL_UP C_VOL_UP
#define ZM_IN LC(EQUAL)
#define ZM_OUT LC(MINUS)
#define ZM_RST LC(N0)
#define BT0 BT_SEL 0
#define BT1 BT_SEL 1
#define BT2 BT_SEL 2
#define BT3 BT_SEL 3
#define BT4 BT_SEL 4
#define HYP LS(LC(LA(LGUI)))

/*
 *  Bindings taken from
 *   https://github.com/bcat/zmk-config/blob/master/config/corne.keymap
 *   https://github.com/rastasheep/zmk-config/blob/master/config/corne.keymap
*/
/* TODO: need to map FN keys */

&kscan0 { debounce-period = <10>; };

&mt {
    tapping-term-ms = <TAPPING_TERM>;
    flavor = "tap-preferred";
};

/ {
    behaviors {
        /*
        * td_lock groups locking functions into one key:
        *  - tap once to lock the host
        *  - tap twice to put the host to sleep
        */

        td_lock: tap_dance_lock {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_LOCK";
            #binding-cells = <0>;
            tapping-term-ms = <TAPPING_TERM>;
            bindings = <&kp LG(LC(Q))>, <&kp LG(LA(C_EJECT))>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <LOWER RAISE>;
            then-layer = <ADJUST>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB           &kp Q  &kp W  &kp E     &kp R      &kp T        &kp Y      &kp U  &kp I          &kp O    &kp P     &kp BACKSPACE
&kp LEFT_CONTROL  &kp A  &kp S  &kp D     &kp F      &kp G        &kp H      &kp J  &kp K          &kp L    &kp SEMI  &kp ENTER
&kp LSHFT         &kp Z  &kp X  &kp C     &kp V      &kp B        &kp N      &kp M  &kp COMMA      &kp DOT  &kp FSLH  &kp RIGHT_SHIFT
                                &kp LGUI  &mo LOWER  &kp SPACE    &kp SPACE  &mo 2  &kp RIGHT_ALT
            >;
        };

        lower_layer {
            bindings = <
&kp ESCAPE      &none  &kp N7        &kp N8        &kp N9        &kp PAGE_UP      &none          &kp LC(TAB)      &kp LC(LS(TAB))  &none      &none  &kp DELETE
&kp RCTRL       &none  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp PAGE_DOWN    &kp LEFT       &kp DOWN         &kp UP_ARROW     &kp RIGHT  &none  &kp ENTER
&kp LEFT_SHIFT  &none  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp N0           &kp C_VOL_DN   &kp C_VOLUME_UP  &kp K_MUTE       &none      &none  &none
                                     &kp LEFT_GUI  &none         &kp SPACE        &kp LG(SPACE)  &mo 2            &kp RIGHT_ALT
            >;
        };

        raise_layer {
            bindings = <
&trans  &trans  &trans        &kp N7        &kp N8        &kp NUMBER_9    &kp HOME      &kp PG_DN  &kp PG_UP  &kp END        &mmv MOVE_UP    &mmv MOVE_DOWN
&trans  &trans  &trans        &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6    &kp LEFT      &kp DOWN   &kp UP     &kp RIGHT      &mmv MOVE_LEFT  &mmv MOVE_RIGHT
&trans  &trans  &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3    &kp LA(LEFT)  &trans     &trans     &kp LA(RIGHT)  &mkp LCLK       &mkp RCLK
                              &trans        &trans        &trans          &trans        &trans     &trans
            >;
        };

        adjust_layer {
            bindings = <
&trans  &trans  &kp C_MUTE  &kp C_VOL_DN      &kp C_VOL_UP  &trans    &bt BT_CLR  &trans   &trans   &trans   &trans   &trans
&trans  &trans  &kp C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT    &trans    &bt BT0     &bt BT1  &bt BT2  &bt BT3  &bt BT4  &trans
&trans  &trans  &trans      &trans            &trans        &trans    &trans      &trans   &trans   &trans   &trans   &trans
                            &trans            &trans        &trans    &trans      &trans   &trans
            >;
        };
    };
};
