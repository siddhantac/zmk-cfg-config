/*
 * Copyright (c) 2020 Jonathan Rascher
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define LOWER 1
#define RAISE 2
#define ADJUST 3
#define LOCK 4
#define LOCK_TOG 5

#define BACK C_AC_BACK
#define FWD C_AC_FORWARD
#define PAUSE PAUSE_BREAK
#define VOL_DN C_VOL_DN
#define VOL_UP C_VOL_UP

#define LC_SPC LC(SPACE)
#define ZM_IN LC(EQUAL)
#define ZM_OUT LC(MINUS)
#define ZM_RST LC(N0)

#define BT0 BT_SEL 0
#define BT1 BT_SEL 1
#define BT2 BT_SEL 2
#define BT3 BT_SEL 3
#define BT4 BT_SEL 4

#define O_TOG OUT_TOG

&kscan0 {
    debounce-period = <10>;
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <LOWER RAISE>;
            then-layer = <ADJUST>;
        };

        lock_tog {
            if-layers = <LOWER RAISE>;
            then-layer = <LOCK_TOG>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp TAB    &kp Q      &kp W      &kp E      &kp R      &kp T                           &kp Y      &kp U      &kp I      &kp O      &kp P      &kp BSPC
                &kp ESC    &kp A      &kp S      &kp D      &kp F      &kp G                           &kp H      &kp J      &kp K      &kp L      &kp SEMI   &kp SQT
                &kp LSHFT  &kp Z      &kp X      &kp C      &kp V      &kp B                           &kp N      &kp M      &kp COMMA  &kp DOT    &kp FSLH   &kp RSHFT
                                                            &kp LCTRL  &mo LOWER  &kp SPACE  &kp RET   &mo RAISE  &kp RALT
            >;
        };

        lower_layer {
            bindings = <
                &trans     &kp EXCL   &kp AT     &kp HASH   &kp DLLR   &kp PRCNT                        &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR   &kp RPAR   &trans
                &kp LC_SPC &kp ZM_RST &kp ZM_OUT &kp ZM_IN  &kp BACK   &kp FWD                          &kp PIPE   &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC   &kp TILDE
                &trans     &kp K_APP  &kp PSCRN  &kp SLCK   &kp PAUSE  &kp LGUI                         &kp BSLH   &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT   &kp GRAVE
                                                            &trans     &trans     &trans     &trans     &trans     &trans
            >;
        };

        raise_layer {
            bindings = <
                &kp CLCK   &kp N1     &kp N2     &kp N3     &kp N4     &kp N5                           &kp N6     &kp N7     &kp N8     &kp N9     &kp N0     &trans
                &trans     &kp F1     &kp F2     &kp F3     &kp F4     &kp F5                           &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &kp F11    &kp DEL
                &trans     &kp F6     &kp F7     &kp F8     &kp F9     &kp F10                          &kp HOME   &kp PG_DN  &kp PG_UP  &kp END    &kp F12    &kp INS
                                                            &trans     &trans     &trans     &trans     &trans     &trans
            >;
        };

        adjust_layer {
            bindings = <
                &trans     &trans     &kp C_PP   &kp VOL_UP &kp C_STOP &trans                           &bt BT_CLR &reset     &trans     &trans     &trans     &trans
                &trans     &trans     &kp C_PREV &kp VOL_DN &kp C_NEXT &trans                           &bt BT0    &bt BT1    &bt BT2    &bt BT3    &bt BT4    &trans
                &trans     &trans     &trans     &kp C_MUTE &trans     &trans                           &trans     &trans     &trans     &trans     &trans     &trans
                                                            &trans     &trans     &trans     &out O_TOG &trans     &trans
            >;
        };

        // "Soft lock" layer that shadows all other layers except the LOCK_TOG layer, effectively
        // disabling all keys other than the lock/unlock sequence (Lower+Raise+Backspace) when the
        // LOCK layer is active. This allows the keyboard to be transported without accidentally
        // sending key events to connected hosts.
        //
        // Since we depend on conditional layers for the lock/unlock binding, the LOWER and RAISE
        // positions must be bound to &trans rather than &none so their respective layers can still
        // be activated even when the LOCK layer is enabled.
        //
        // If https://github.com/zmkfirmware/zmk/issues/405 is implemented, the next two layers can
        // be replaced by a native behavior in the future.
        lock_layer {
            bindings = <
                &none      &none      &none      &none      &none      &none                            &none      &none      &none      &none      &none      &none
                &none      &none      &none      &none      &none      &none                            &none      &none      &none      &none      &none      &none
                &none      &none      &none      &none      &none      &none                            &none      &none      &none      &none      &none      &none
                                                            &none      &trans     &none      &none      &trans     &none
            >;
        };

        // The Lower+Raise+Backspace binding toggles the lock layer. Both the ADJUST and LOCK_TOG
        // layers are active iff LOWER and RAISE are pressed, but since the LOCK_TOG layer is the
        // highest-numbered layer, it can always be accessed, even if the LOCK layer is enabled (and
        // hence thus the ADJUST layer bindings are not accessible).
        lock_tog_layer {
            bindings = <
                &trans     &trans     &trans     &trans     &trans     &trans                           &trans     &trans     &trans     &trans     &trans     &tog LOCK
                &trans     &trans     &trans     &trans     &trans     &trans                           &trans     &trans     &trans     &trans     &trans     &trans
                &trans     &trans     &trans     &trans     &trans     &trans                           &trans     &trans     &trans     &trans     &trans     &trans
                                                            &trans     &trans     &trans     &trans     &trans     &trans
            >;
        };
    };
};
